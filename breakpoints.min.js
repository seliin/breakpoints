/*
 * Breakpoints.js
 * Version 3.0
 * 
 * Creates handy events for your responsive design breakpoints.
 * Use it like this to bind to certain breakpoint changes:
 * 
 * breakpoints([0, 480, 960], function(oldP, newP) { 
 *   console.log(oldP, newP)
 * });
 * 
 * Version 1.0 written and copyright by XOXCO, Inc
 * http://xoxco.com/
 * 
 * Version 2.0 and 3.0 rewrite and copyright by Eike Send
 * http://eike.se/nd
 * 
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/mit-license.php
 *
 */
(function(){var a=currentBP=-1,b,c=0,d,e=30;breakpoints=function(a,c){b=a.sort(function(a,b){return a-b});var d=window.onresize;window.onresize=function(){d&&d(),f(!0)},c&&breakpoints.bind(c),f()};var f=function(g){var h=(new Date).getTime();if(g&&c&&h-c<e){clearTimeout(d),d=setTimeout(f,e);return}c=h;var j=document.documentElement.clientWidth,k=document.compatMode==="CSS1Compat"&&j||document.body&&document.body.clientWidth||j;currentBP=breakpoints.getCurrentBreakPoint(b,k);if(a!=currentBP){var l=[];for(var m=0;m<b.length;m++){var n=b[m];(n>=a&&n<=currentBP||n>=currentBP&&n<=a)&&l.push(n)}currentBP<a&&(l=l.reverse());for(var m=0;m<l.length;m++)i(l[m]);a=currentBP}};breakpoints.getCurrentBreakPoint=function(a,b){for(var c in a){c=parseInt(c);if(b>=a[c]&&(a.length==c+1||b<a[c+1]))return a[c]}return 0};var g=[],h=[];breakpoints.bind=function(a){h.push(a);if(g.length)for(var b=1;b<g.length;b++)a(g[b-1],g[b])};var i=function(a){for(var b=0;b<h.length;b++){var c=h[b];g.length>0&&g[g.length-1]!=a&&c(g[g.length-1],a)}g.push(a)}})();

